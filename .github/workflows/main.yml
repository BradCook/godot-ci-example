name: build-godot-game
run-name: build-godot-${{ github.sha }}
on: [push]
env:
    GODOT_RUST_WORKSPACE: "${{ github.workspace }}/rust"
    GODOT_GAME_WORKSPACE: "${{ github.workspace }}/squash_the_creeps_start_1.1.0"
    GODOT_RUST_BUILD_FOLDER: "${{ github.workspace }}/target"
    GODOT_INSTALL_FOLDER: "${{ github.workspace }}/godot_engine"
    GODOT_TEMPLATES_FOLDER: "${{ github.workspace }}/export_templates"
    RUST_GDEXTENSION_BINARY_NAME: "libsquash_creeps.so"
    RUST_GDEXTENSION_BINARY_PATH: "${{ github.workspace }}/rust/target"
    EXPORT_PRESET_NAME: "linux"
    EXPORTED_GAME_FILE_NAME: "squash_creeps"
    EXPORTED_GAME_FILE_EXTENSION: "x86_64"
    RELEASE_TYPE: "release"
    BUILD_FOLDER: "${{ github.workspace }}/build"
jobs:
    find-godot-engine-info:
        runs-on: ubuntu-latest
        outputs:
          godot_version: ${{ steps.godot-version.outputs.godot_version }}
          arch: ${{ steps.arch.outputs.arch }}
        steps:
            - uses: actions/checkout@v4
            - name: Find Godot version and system architecture
              id: godot-version
              run: |
                GODOT_VERSION=$(cat .godot-version | xargs)
                echo "Godot Version: $GODOT_VERSION"
                echo "godot_version=$GODOT_VERSION" >> $GITHUB_OUTPUT

            - name: Find system architecture
              id: arch
              run: |
                ARCH=$(uname -m)
                echo "System architecture: $ARCH"
                echo "arch=$ARCH" >> $GITHUB_OUTPUT

    setup-godot:
      runs-on: ubuntu-latest
      needs: [find-godot-engine-info]
      outputs:
        cache_key: ${{ steps.restore-godot-cache.outputs.cache-primary-key }}
        templates_cache_key: ${{ steps.restore-templates-cache.outputs.cache-primary-key }}
      steps:
        - name: Restore Godot from Cache
          id: restore-godot-cache
          uses: actions/cache/restore@v4
          with:
            path: ${{ env.GODOT_INSTALL_FOLDER }}
            key: ${{ needs.find-godot-engine-info.outputs.godot_version }}-${{ needs.find-godot-engine-info.outputs.arch }}

        - name: Install Godot
          id: install-godot
          env:
            GODOT_VERSION: ${{ needs.find-godot-engine-info.outputs.godot_version }}
            ARCH: ${{ needs.find-godot-engine-info.outputs.arch }}
          if: steps.restore-godot-cache.outputs.cache-hit != 'true'
          run: |
            mkdir $GODOT_INSTALL_FOLDER
            cd ${{ runner.temp }}
            wget --no-verbose -O godot.zip https://github.com/godotengine/godot/releases/download/$GODOT_VERSION-stable/Godot_v$GODOT_VERSION-stable_linux.$ARCH.zip
            unzip godot.zip -d $GODOT_INSTALL_FOLDER
            cd $GODOT_INSTALL_FOLDER
            ln -s Godot_v$GODOT_VERSION-stable_linux.$ARCH Godot
            export PATH="$GODOT_INSTALL_FOLDER:$PATH"
            Godot --version

        - name: Save Godot to cache
          uses: actions/cache/save@v4
          id: save-godot-cache
          if: steps.restore-godot-cache.outputs.cache-hit != 'true'
          with:
            path: ${{ env.GODOT_INSTALL_FOLDER }}
            key: ${{ steps.restore-godot-cache.outputs.cache-primary-key }}

        - name: Restore Godot Export Templates from Cache
          id: restore-templates-cache
          uses: actions/cache/restore@v4
          with:
            path: ${{ env.GODOT_TEMPLATES_FOLDER }}
            key: ${{ needs.find-godot-engine-info.outputs.godot_version }}

        - name: Install Templates
          id: install-templates
          env:
            GODOT_VERSION: ${{ needs.find-godot-engine-info.outputs.godot_version }}
          if: steps.restore-templates-cache.outputs.cache-hit != 'true'
          run: |
            mkdir $GODOT_TEMPLATES_FOLDER
            cd ${{runner.temp}}
            wget --no-verbose -O templates.tpz https://github.com/godotengine/godot/releases/download/$GODOT_VERSION-stable/Godot_v$GODOT_VERSION-stable_export_templates.tpz
            unzip templates.tpz
            cp --recursive ${{ runner.temp }}/templates/* $GODOT_TEMPLATES_FOLDER
            ls -la $GODOT_TEMPLATES_FOLDER

        - name: Save Godot Templates to Cache
          uses: actions/cache/save@v4
          id: save-templates-cache
          if: steps.restore-templates-cache.outputs.cache-hit != 'true'
          with:
            path: ${{ env.GODOT_TEMPLATES_FOLDER }}
            key: ${{ steps.restore-templates-cache.outputs.cache-primary-key }}

    compile-rust-code:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: dtolnay/rust-toolchain@stable
            - uses: Swatinem/rust-cache@v2
              with:
                workspaces: ${{ env.GODOT_RUST_WORKSPACE }} -> ../target
            - name: Compile godot-rust extension game code
              run: |
                if [[ $RELEASE_TYPE == "release" ]]; then
                  cargo build --release --manifest-path $GODOT_RUST_WORKSPACE/Cargo.toml --target-dir $GODOT_RUST_BUILD_FOLDER
                else
                  cargo build --manifest-path $GODOT_RUST_WORKSPACE/Cargo.toml --target-dir $GODOT_RUST_BUILD_FOLDER
                fi
            - name: Save Rust GDExtension binary
              id: save-rust-binary
              uses: actions/upload-artifact@v4
              with:
                name: ${{ env.RUST_GDEXTENSION_BINARY_NAME }}
                path: ${{ env.GODOT_RUST_BUILD_FOLDER }}/${{ env.RELEASE_TYPE }}/${{ env.RUST_GDEXTENSION_BINARY_NAME }}
                retention-days: 1
                overwrite: true

    build-game:
      runs-on: ubuntu-latest
      needs: [find-godot-engine-info, setup-godot, compile-rust-code]
      steps:
        - uses: actions/checkout@v4
        - name: Restore Godot from Cache
          id: restore-godot-cache
          uses: actions/cache/restore@v4
          with:
            path: ${{ env.GODOT_INSTALL_FOLDER }}
            key: ${{ needs.setup-godot.outputs.cache_key }}

        - name: Restore Templates from Cache
          id: restore-templates-cache
          uses: actions/cache/restore@v4
          with:
            path: ${{ env.GODOT_TEMPLATES_FOLDER }}
            key: ${{ needs.setup-godot.outputs.templates_cache_key }}

        - name: Set Godot to Path
          id: set-godot-to-path
          run: |
            echo $GODOT_INSTALL_FOLDER >> $GITHUB_PATH

        - name: Copy Templates to export folder
          id: copy-templates
          env:
            GODOT_VERSION: ${{ needs.find-godot-engine-info.outputs.godot_version }}
          run: |
            mkdir -p $HOME/.local/share/godot/export_templates/$GODOT_VERSION.stable
            cp -r $GODOT_TEMPLATES_FOLDER/* $HOME/.local/share/godot/export_templates/$GODOT_VERSION.stable
            ls -la $HOME/.local/share/godot/export_templates/$GODOT_VERSION.stable

        - name: Get Rust GDExtension binary
          id: get-rust-binary
          uses: actions/download-artifact@v4
          with:
            name: ${{ env.RUST_GDEXTENSION_BINARY_NAME }}
            path: ${{ env.RUST_GDEXTENSION_BINARY_PATH }}/${{ env.RELEASE_TYPE }}

        - name: Build Game
          id: build-game
          env:
            EXPORT_CONFIG: ${{ secrets.EXPORT_CONFIG }}
          run: |
            mkdir -p $BUILD_FOLDER
            echo "$EXPORT_CONFIG" >> $GODOT_GAME_WORKSPACE/export_presets.cfg
            echo "Godot --path $GODOT_GAME_WORKSPACE --export-$RELEASE_TYPE $EXPORT_PRESET_NAME $BUILD_FOLDER/$EXPORTED_GAME_FILE_NAME.$EXPORTED_GAME_FILE_EXTENSION --headless"
            Godot --path $GODOT_GAME_WORKSPACE --export-$RELEASE_TYPE $EXPORT_PRESET_NAME $BUILD_FOLDER/$EXPORTED_GAME_FILE_NAME.$EXPORTED_GAME_FILE_EXTENSION --headless
            echo "Here are the files that have been built"
            ls -la $BUILD_FOLDER

        - name: Save Built Game
          id: save-game
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.EXPORTED_GAME_FILE_NAME }}-${{ env.RELEASE_TYPE }}
            path: ${{ env.BUILD_FOLDER }}
            overwrite: true
